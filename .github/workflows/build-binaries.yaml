name: Build Binaries

on:
  pull_request:
    branches: [main]
  release:
    types: [published]

env:
  package_name: sudoku_machine

jobs:
  build-wasm:
    name: Build Wasm
    if: ${{ github.event_name == 'release' || startsWith(github.head_ref, 'release-plz') }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown
      - name: install wasm-bindgen-cli
        run: |
          cargo install wasm-bindgen-cli

      - name: Build
        run: |
          cargo build --release --target wasm32-unknown-unknown

      - name: Prepare package
        run: |
          wasm-bindgen \
            --out-name ${{ env.package_name }} \
            --out-dir wasm \
            --target web \
            target/wasm32-unknown-unknown/release/${{ env.package_name }}.wasm
          cp -r assets wasm/

      - name: Package as a zip
        working-directory: ./wasm
        run: |
          zip --recurse-paths ../${{ env.package_name }}.zip .

      - name: Upload binaries to artifacts
        if: ${{ github.event_name == 'release' }}
        uses: actions/upload-artifact@v4
        with:
          path: ${{ env.package_name }}.zip
          name: wasm
          retention-days: 1

      - name: Upload binaries to release
        if: ${{ github.event_name == 'release' }}
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ env.package_name }}.zip
          asset_name: ${{ env.package_name }}-wasm-${{ github.ref_name }}.zip
          overwrite: true
          tag: ${{ github.ref_name }}

  build-linux:
    name: Build Linux
    if: ${{ github.event_name == 'release' || startsWith(github.head_ref, 'release-plz') }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-unknown-linux-gnu
      - name: install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install \
            pkg-config libx11-dev libasound2-dev libudev-dev libxcb-render0-dev libxcb-shape0-dev \
            libxcb-xfixes0-dev

      - name: Build
        run: |
          cargo build --release --target x86_64-unknown-linux-gnu

      - name: Prepare package
        run: |
          mkdir linux
          cp target/x86_64-unknown-linux-gnu/release/${{ env.package_name }} linux/
          cp -r assets linux/

      - name: Package as a zip
        working-directory: ./linux
        run: |
          zip --recurse-paths ../${{ env.package_name }}.zip .

      - name: Upload binaries to artifacts
        if: ${{ github.event_name == 'release' }}
        uses: actions/upload-artifact@v4
        with:
          path: ${{ env.package_name }}.zip
          name: linux
          retention-days: 1

      - name: Upload binaries to release
        if: ${{ github.event_name == 'release' }}
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ env.package_name }}.zip
          asset_name: ${{ env.package_name }}-linux-${{ github.ref_name }}.zip
          overwrite: true
          tag: ${{ github.ref_name }}

  build-windows:
    name: Build Windows
    if: ${{ github.event_name == 'release' || startsWith(github.head_ref, 'release-plz') }}
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-msvc

      - name: Build
        run: |
          cargo build --release --target x86_64-pc-windows-msvc

      - name: Prepare package
        run: |
          mkdir windows
          cp target/x86_64-pc-windows-msvc/release/${{ env.package_name }}.exe windows/
          mkdir assets -ea 0
          cp -r assets windows/

      - name: Package as a zip
        run: |
          Compress-Archive -Path windows/* -DestinationPath ${{ env.package_name }}.zip

      - name: Upload binaries to artifacts
        if: ${{ github.event_name == 'release' }}
        uses: actions/upload-artifact@v4
        with:
          path: ${{ env.package_name }}.zip
          name: windows
          retention-days: 1

      - name: Upload binaries to release
        if: ${{ github.event_name == 'release' }}
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ env.package_name }}.zip
          asset_name: ${{ env.package_name }}-windows-${{ github.ref_name }}.zip
          overwrite: true
          tag: ${{ github.ref_name }}

  build-macOS-intel:
    name: Build macOS - Intel
    if: ${{ github.event_name == 'release' || startsWith(github.head_ref, 'release-plz') }}
    runs-on: macOS-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-apple-darwin
      - name: Environment Setup
        run: |
          export CFLAGS="-fno-stack-check"
          export MACOSX_DEPLOYMENT_TARGET="10.9"

      - name: Build
        run: |
          cargo build --release --target x86_64-apple-darwin

      - name: Prepare Package
        run: |
          mkdir -p ${{ env.package_name }}.app/Contents/MacOS
          cp \
            target/x86_64-apple-darwin/release/${{ env.package_name }} \
            ${{ env.package_name }}.app/Contents/MacOS/
          cp -r assets ${{ env.package_name }}.app/Contents/MacOS/
          hdiutil create \
            -fs HFS+ \
            -volname "${{ env.package_name }}" \
            -srcfolder ${{ env.package_name }}.app \
            ${{ env.package_name }}-macOS-intel.dmg

      - name: Upload binaries to artifacts
        if: ${{ github.event_name == 'release' }}
        uses: actions/upload-artifact@v4
        with:
          path: ${{ env.package_name }}-macOS-intel.dmg
          name: macOS-intel
          retention-days: 1

      - name: Upload binaries to release
        if: ${{ github.event_name == 'release' }}
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ env.package_name }}-macOS-intel.dmg
          asset_name: ${{ env.package_name }}-macOS-intel-${{ github.ref_name }}.dmg
          overwrite: true
          tag: ${{ github.ref_name }}

  build-macOS-apple-silicon:
    name: Build macOS - Apple Silicon
    if: ${{ github.event_name == 'release' || startsWith(github.head_ref, 'release-plz') }}
    runs-on: macOS-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-apple-darwin
      - name: Environment
        # macOS 11 was the first version to support ARM
        run: |
          export MACOSX_DEPLOYMENT_TARGET="15"

      - name: Build
        run: |
          cargo build --release --target aarch64-apple-darwin

      - name: Prepare Package
        run: |
          mkdir -p ${{ env.package_name }}.app/Contents/MacOS
          cp \
            target/aarch64-apple-darwin/release/${{ env.package_name }} \
            ${{ env.package_name }}.app/Contents/MacOS/
          cp -r assets ${{ env.package_name }}.app/Contents/MacOS/
          hdiutil create \
            -fs HFS+ \
            -volname "${{ env.package_name }}-macOS-apple-silicon" \
            -srcfolder ${{ env.package_name }}.app \
            ${{ env.package_name }}-macOS-apple-silicon.dmg

      - name: Upload binaries to artifacts
        if: ${{ github.event_name == 'release' }}
        uses: actions/upload-artifact@v4
        with:
          path: ${{ env.package_name }}-macOS-apple-silicon.dmg
          name: macOS-apple-silicon
          retention-days: 1

      - name: Upload binaries to release
        if: ${{ github.event_name == 'release' }}
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ env.package_name }}-macOS-apple-silicon.dmg
          asset_name: ${{ env.package_name }}-macOS-apple-silicon-${{ github.ref_name }}.dmg
          overwrite: true
          tag: ${{ github.ref_name }}
