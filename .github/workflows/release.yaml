name: Release

on:
  push:
    branches: [main]

jobs:
  release-plz-pr:
    name: Release-plz PR
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    concurrency:
      group: release-plz-${{ github.ref }}
      cancel-in-progress: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.RELEASE_PLZ_TOKEN }}
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      - name: Install Dependencies
        run: sudo apt-get update; sudo apt-get install --no-install-recommends libasound2-dev libudev-dev
      - name: Run release-plz
        uses: release-plz/action@v0.5
        with:
          command: release-pr
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_PLZ_TOKEN }}
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

  release-plz-release:
    name: Release-plz Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.RELEASE_PLZ_TOKEN }}
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      - name: Install Dependencies
        run: sudo apt-get update; sudo apt-get install --no-install-recommends libasound2-dev libudev-dev
      - name: Run release-plz
        id: release-plz-release
        uses: release-plz/action@v0.5
        with:
          command: release
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_PLZ_TOKEN }}
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
      - run: echo "${{ steps.release-plz-release.outputs }}"

  release-wasm:
    runs-on: ubuntu-latest
    needs: [release-plz-release]
    if: needs.release-plz-release.outputs.releases_created
    strategy:
      matrix:
        release: ${{ needs.release-plz-release.outputs.releases }}
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown
      - name: install wasm-bindgen-cli
        run: |
          cargo install wasm-bindgen-cli

      - name: Build
        run: |
          cargo build --release --target wasm32-unknown-unknown

      - name: Prepare package
        run: |
          wasm-bindgen --no-typescript --out-name bevy_game --out-dir wasm --target web target/wasm32-unknown-unknown/release/${{ matrix.release.package_name }}.wasm
          cp -r assets wasm/

      - name: Package as a zip
        working-directory: ./wasm
        run: |
          zip --recurse-paths ../${{ matrix.release.package_name }}.zip .

      - name: Upload binaries to artifacts
        uses: actions/upload-artifact@v3
        with:
          path: ${{ matrix.release.package_name }}.zip
          name: wasm
          retention-days: 1

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ matrix.release.package_name }}.zip
          asset_name: ${{ matrix.release.package_name }}-wasm-${{ matrix.release.tag }}.zip
          overwrite: true

  release-linux:
    runs-on: ubuntu-latest
    needs: [release-plz-release]
    if: needs.release-plz-release.outputs.releases_created
    strategy:
      matrix:
        release: ${{ needs.release-plz-release.outputs.releases }}
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-unknown-linux-gnu
      - name: install dependencies
        run: |
          sudo apt-get update; sudo apt-get install pkg-config libx11-dev libasound2-dev libudev-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev

      - name: Build
        run: |
          cargo build --release --target x86_64-unknown-linux-gnu

      - name: Prepare package
        run: |
          mkdir linux
          cp target/x86_64-unknown-linux-gnu/release/${{ matrix.release.package_name }} linux/
          cp -r assets linux/

      - name: Package as a zip
        working-directory: ./linux
        run: |
          zip --recurse-paths ../${{ matrix.release.package_name }}.zip .

      - name: Upload binaries to artifacts
        uses: actions/upload-artifact@v3
        with:
          path: ${{ matrix.release.package_name }}.zip
          name: linux
          retention-days: 1

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ matrix.release.package_name }}.zip
          asset_name: ${{ matrix.release.package_name }}-linux-${{ matrix.release.tag }}.zip
          overwrite: true

  release-windows:
    runs-on: windows-latest
    needs: [release-plz-release]
    if: needs.release-plz-release.outputs.releases_created
    strategy:
      matrix:
        release: ${{ needs.release-plz-release.outputs.releases }}
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-msvc

      - name: Build
        run: |
          cargo build --release --target x86_64-pc-windows-msvc

      - name: Prepare package
        run: |
          mkdir windows
          cp target/x86_64-pc-windows-msvc/release/${{ matrix.release.package_name }}.exe windows/
          mkdir assets -ea 0
          cp -r assets windows/

      - name: Package as a zip
        run: |
          Compress-Archive -Path windows/* -DestinationPath ${{ matrix.release.package_name }}.zip

      - name: Upload binaries to artifacts
        uses: actions/upload-artifact@v3
        with:
          path: ${{ matrix.release.package_name }}.zip
          name: windows
          retention-days: 1

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ matrix.release.package_name }}.zip
          asset_name: ${{ matrix.release.package_name }}-windows-${{ matrix.release.tag }}.zip
          overwrite: true

  release-macOS-intel:
    runs-on: macOS-latest
    needs: [release-plz-release]
    if: needs.release-plz-release.outputs.releases_created
    strategy:
      matrix:
        release: ${{ needs.release-plz-release.outputs.releases }}
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-apple-darwin
      - name: Environment Setup
        run: |
          export CFLAGS="-fno-stack-check"
          export MACOSX_DEPLOYMENT_TARGET="10.9"

      - name: Build
        run: |
          cargo build --release --target x86_64-apple-darwin

      - name: Prepare Package
        run: |
          mkdir -p ${{ matrix.release.package_name }}.app/Contents/MacOS
          cp target/x86_64-apple-darwin/release/${{ matrix.release.package_name }} ${{ matrix.release.package_name }}.app/Contents/MacOS/
          cp -r assets ${{ matrix.release.package_name }}.app/Contents/MacOS/
          hdiutil create -fs HFS+ -volname "${{ matrix.release.package_name }}" -srcfolder ${{ matrix.release.package_name }}.app ${{ matrix.release.package_name }}-macOS-intel.dmg

      - name: Upload binaries to artifacts
        uses: actions/upload-artifact@v3
        with:
          path: ${{ matrix.release.package_name }}-macOS-intel.dmg
          name: macOS-intel
          retention-days: 1

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ matrix.release.package_name }}-macOS-intel.dmg
          asset_name: ${{ matrix.release.package_name }}-macOS-intel-${{ matrix.release.tag }}.dmg
          overwrite: true

  release-macOS-apple-silicon:
    runs-on: macOS-latest
    needs: [release-plz-release]
    if: needs.release-plz-release.outputs.releases_created
    strategy:
      matrix:
        release: ${{ needs.release-plz-release.outputs.releases }}
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-apple-darwin
      - name: Environment
        # macOS 11 was the first version to support ARM
        run: |
          export MACOSX_DEPLOYMENT_TARGET="15"

      - name: Build
        run: |
          cargo build --release --target aarch64-apple-darwin

      - name: Prepare Package
        run: |
          mkdir -p ${{ matrix.release.package_name }}.app/Contents/MacOS
          cp target/aarch64-apple-darwin/release/${{ matrix.release.package_name }} ${{ matrix.release.package_name }}.app/Contents/MacOS/
          cp -r assets ${{ matrix.release.package_name }}.app/Contents/MacOS/
          hdiutil create -fs HFS+ -volname "${{ matrix.release.package_name }}-macOS-apple-silicon" -srcfolder ${{ matrix.release.package_name }}.app ${{ matrix.release.package_name }}-macOS-apple-silicon.dmg

      - name: Upload binaries to artifacts
        uses: actions/upload-artifact@v3
        with:
          path: ${{ matrix.release.package_name }}-macOS-apple-silicon.dmg
          name: macOS-apple-silicon
          retention-days: 1

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ matrix.release.package_name }}-macOS-apple-silicon.dmg
          asset_name: ${{ matrix.release.package_name }}-macOS-apple-silicon-${{ matrix.release.tag }}.dmg
          overwrite: true
